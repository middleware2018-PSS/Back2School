package actions

import (
	"bytes"
	"net/http"
	"time"

	"github.com/cippaciong/jsonapi"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gofrs/uuid"
	"github.com/middleware2018-PSS/back2_school/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Payment)
// DB Table: Plural (payments)
// Resource: Plural (Payments)
// Path: Plural (/payments)
// View Template Folder: Plural (/templates/payments/)

// PaymentsResource is the resource for the Payment model
type PaymentsResource struct {
	buffalo.Resource
}

// List gets all Payments. This function is mapped to the path
// GET /payments
// @Summary List payments
// @Description Get the list of all payments
// @Tags Payments
// @Accept  json
// @Produce  json
// @Success 200 {array} models.Payment
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /payments [get]
func (v PaymentsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "No transaction found", "Internal Server Error",
			http.StatusInternalServerError, errors.New("No transaction found"))
	}

	payments := &models.Payments{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Payments from the DB
	if err := q.All(payments); err != nil {
		return apiError(c, "Internal Error", "Internal Server Error",
			http.StatusInternalServerError, err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	res := new(bytes.Buffer)
	err := jsonapi.MarshalPayload(res, *payments)
	if err != nil {
		log.Debug("Problem marshalling payments in actions.PaymentsResource.List")
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Show gets the data for one Payment. This function is mapped to
// the path GET /payments/{payment_id}
// @Summary Get a payment
// @Description Get a single payment and its relationships
// @Tags Payments
// @Accept  json
// @Produce  json
// @Success 200 {object} models.Payment
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /payments/{id} [get]
func (v PaymentsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "No transaction found", "Internal Server Error",
			http.StatusInternalServerError, errors.New("No transaction found"))
	}

	// Allocate an empty Payment
	payment := &models.Payment{}

	// To find the Payment the parameter payment_id is used.
	if err := tx.Eager().Find(payment, c.Param("payment_id")); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	res := new(bytes.Buffer)
	err := jsonapi.MarshalPayload(res, payment)
	if err != nil {
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// New renders the form for creating a new Payment.
// This function is mapped to the path GET /payments/new
func (v PaymentsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Payment{}))
}

// Create adds a Payment to the DB. This function is mapped to the
// path POST /payments
// @Summary Create a payment
// @Description Create a payment from the payload
// @Tags Payments
// @Accept  json
// @Produce  json
// @Param Payment body models.Payment true "Payment payload"
// @Success 200 {object} models.Payment
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 422 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /payments [post]
func (v PaymentsResource) Create(c buffalo.Context) error {
	// Allocate an empty Payment
	payment := &models.Payment{}

	// Unmarshal payment from the json payload
	if err := jsonapi.UnmarshalPayload(c.Request().Body, payment); err != nil {
		return apiError(c, "Error processing the request payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Create and save the payment
	verrs, err := tx.ValidateAndCreate(payment)
	if err != nil {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, err)
	}

	// Check for validation errors
	if verrs.HasAny() {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, verrs)
	}

	// Log payment creation
	log.Debug("Payment created in actions.PaymentsResource.Create:\n%v\n", payment)

	// Reload the payment to rebuild relationships
	if err := tx.Eager().Find(payment, payment.ID); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	// If there are no errors return the Payment resource
	res := new(bytes.Buffer)
	err = jsonapi.MarshalPayload(res, payment)
	if err != nil {
		return apiError(c, "Error processing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}
	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Edit renders a edit form for a Payment. This function is
// mapped to the path GET /payments/{payment_id}/edit
func (v PaymentsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Payment
	payment := &models.Payment{}

	if err := tx.Find(payment, c.Param("payment_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, payment))
}

// Update changes a Payment in the DB. This function is mapped to
// the path PUT /payments/{payment_id}
// @Summary Update a payment
// @Description Update a payment from the payload
// @Tags Payments
// @Accept  json
// @Produce  json
// @Param Payment body models.Payment true "Payment payload"
// @Success 200 {object} models.Payment
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 422 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /payments [put]
func (v PaymentsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Allocate an empty Payment
	payment := &models.Payment{}

	if err := tx.Find(payment, c.Param("payment_id")); err != nil {
		return apiError(c, "Cannot update the resource. Resource not found",
			"Not Found", http.StatusNotFound, err)
	}

	// Unmarshall the JSON payload into a Payment struct
	if err := jsonapi.UnmarshalPayload(c.Request().Body, payment); err != nil {
		return apiError(c, "Error processing the request payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Update the payment in the DB
	verrs, err := tx.ValidateAndUpdate(payment)
	if err != nil {
		return apiError(c, "Internal error",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Check for validation errors
	if verrs.HasAny() {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, verrs)
	}

	// Reload the payment to rebuild relationships
	if err := tx.Eager().Find(payment, payment.ID); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	// Marshal the resource and send it back
	res := new(bytes.Buffer)
	err = jsonapi.MarshalPayload(res, payment)
	if err != nil {
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Destroy deletes a Payment from the DB. This function is mapped
// to the path DELETE /payments/{payment_id}
// @Summary Delete a payment
// @Description Delete a payment
// @Tags Payments
// @Accept  json
// @Produce  json
// @Param  id path int true "Payment ID" Format(uuid)
// @Success 204 {object} models.Payment
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /payments/{id} [delete]
func (v PaymentsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Allocate an empty Payment
	payment := &models.Payment{}

	// To find the Payment the parameter payment_id is used.
	if err := tx.Find(payment, c.Param("payment_id")); err != nil {
		return apiError(c, "Cannot delete resource. Resource not found",
			"Not Found", http.StatusNotFound, err)
	}

	if err := tx.Destroy(payment); err != nil {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, err)
	}

	// Redirect to the payments index page
	return c.Render(204, r.Func("application/json",
		customJSONRenderer("")))
}

func FakePay(c buffalo.Context) error {
	type PaymentConfirm struct {
		ID        uuid.UUID `json:"-" db:"-" jsonapi:"primary,payment_confirm"`
		DueDate   time.Time `json:"-" db:"-" jsonapi:"attr,due_date,iso8601"`
		IssueDate time.Time `json:"-" db:"-" jsonapi:"attr,issue_date,iso8601"`
		Amount    float64   `json:"-" db:"-" jsonapi:"attr,amount"`
		Message   string    `json:"-" db:"-" jsonapi:"attr,message"`
		Relation  *jsonapi.Links
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Allocate an empty Payment
	payment := &models.Payment{}

	// To find the Payment the parameter payment_id is used.
	if err := tx.Find(payment, c.Param("payment_id")); err != nil {
		return apiError(c, "Cannot simulate payment. Resource not found",
			"Not Found", http.StatusNotFound, err)
	}

	id, _ := uuid.NewV4()
	paymentConfirm := PaymentConfirm{
		ID:        id,
		DueDate:   payment.DueDate,
		IssueDate: payment.IssueDate,
		Amount:    payment.Amount,
		Message:   "Payment confirmed, thank you",
	}

	if err := tx.Destroy(payment); err != nil {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, err)
	}

	// Marshal the resource and send it back
	res := new(bytes.Buffer)
	err := jsonapi.MarshalPayload(res, &paymentConfirm)
	if err != nil {
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}
