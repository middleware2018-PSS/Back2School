package actions

import (
	"bytes"
	"net/http"

	"github.com/cippaciong/jsonapi"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/middleware2018-PSS/back2_school/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Appointment)
// DB Table: Plural (appointments)
// Resource: Plural (Appointments)
// Path: Plural (/appointments)
// View Template Folder: Plural (/templates/appointments/)

// AppointmentsResource is the resource for the Appointment model
type AppointmentsResource struct {
	buffalo.Resource
}

// List gets all Appointments. This function is mapped to the path
// GET /appointments
// @Summary List appointments
// @Description Get the list of all appointments
// @Tags Appointments
// @Accept  json
// @Produce  json
// @Success 200 {array} models.Appointment
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /appointments [get]
// @Security ApiKeyAuth
func (v AppointmentsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "No transaction found", "Internal Server Error",
			http.StatusInternalServerError, errors.New("No transaction found"))
	}

	appointments := &models.Appointments{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Appointments from the DB
	if err := q.All(appointments); err != nil {
		return apiError(c, "Internal Error", "Internal Server Error",
			http.StatusInternalServerError, err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	res := new(bytes.Buffer)
	err := jsonapi.MarshalPayload(res, *appointments)
	if err != nil {
		log.Debug("Problem marshalling appointments in actions.AppointmentsResource.List")
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Show gets the data for one Appointment. This function is mapped to
// the path GET /appointments/{appointment_id}
// @Summary Get an appointment
// @Description Get a single appointment and its relationships
// @Tags Appointments
// @Accept  json
// @Produce  json
// @Success 200 {object} models.Appointment
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /appointments/{id} [get]
// @Security ApiKeyAuth
func (v AppointmentsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "No transaction found", "Internal Server Error",
			http.StatusInternalServerError, errors.New("No transaction found"))
	}

	// Allocate an empty Appointment
	appointment := &models.Appointment{}

	// To find the Appointment the parameter appointment_id is used.
	if err := tx.Eager().Find(appointment, c.Param("appointment_id")); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	res := new(bytes.Buffer)
	err := jsonapi.MarshalPayload(res, appointment)
	if err != nil {
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// New renders the form for creating a new Appointment.
// This function is mapped to the path GET /appointments/new
func (v AppointmentsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Appointment{}))
}

// Create adds a Appointment to the DB. This function is mapped to the
// path POST /appointments
// @Summary Create an appointment
// @Description Create an appointment from the payload
// @Tags Appointments
// @Accept  json
// @Produce  json
// @Param Appointment body models.Appointment true "Appointment payload"
// @Success 200 {object} models.Appointment
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 422 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /appointments [post]
// @Security ApiKeyAuth
func (v AppointmentsResource) Create(c buffalo.Context) error {
	// Allocate an empty Appointment
	appointment := &models.Appointment{}

	// Unmarshal appointment from the json payload
	if err := jsonapi.UnmarshalPayload(c.Request().Body, appointment); err != nil {
		return apiError(c, "Error processing the request payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Create and save the appointment
	verrs, err := tx.ValidateAndCreate(appointment)
	if err != nil {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, err)
	}

	// Check for validation errors
	if verrs.HasAny() {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, verrs)
	}

	// Log appointment creation
	log.Debug("Appointment created in actions.AppointmentsResource.Create:\n%v\n", appointment)

	// Reload the appointment to rebuild relationships
	if err := tx.Eager().Find(appointment, appointment.ID); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	// If there are no errors return the Appointment resource
	res := new(bytes.Buffer)
	err = jsonapi.MarshalPayload(res, appointment)
	if err != nil {
		return apiError(c, "Error processing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}
	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Edit renders a edit form for a Appointment. This function is
// mapped to the path GET /appointments/{appointment_id}/edit
func (v AppointmentsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Appointment
	appointment := &models.Appointment{}

	if err := tx.Find(appointment, c.Param("appointment_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, appointment))
}

// Update changes a Appointment in the DB. This function is mapped to
// the path PUT /appointments/{appointment_id}
// @Summary Update an appointment
// @Description Update an appointment from the payload
// @Tags Appointments
// @Accept  json
// @Produce  json
// @Param Appointment body models.Appointment true "Appointment payload"
// @Success 200 {object} models.Appointment
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 422 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /appointments [put]
// @Security ApiKeyAuth
func (v AppointmentsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Allocate an empty Appointment
	appointment := &models.Appointment{}

	if err := tx.Find(appointment, c.Param("appointment_id")); err != nil {
		return apiError(c, "Cannot update the resource. Resource not found",
			"Not Found", http.StatusNotFound, err)
	}

	// Unmarshall the JSON payload into a Appointment struct
	if err := jsonapi.UnmarshalPayload(c.Request().Body, appointment); err != nil {
		return apiError(c, "Error processing the request payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Update the appointment in the DB
	verrs, err := tx.ValidateAndUpdate(appointment)
	if err != nil {
		return apiError(c, "Internal error",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Check for validation errors
	if verrs.HasAny() {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, verrs)
	}

	// Reload the appointment to rebuild relationships
	if err := tx.Eager().Find(appointment, appointment.ID); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	// Marshal the resource and send it back
	res := new(bytes.Buffer)
	err = jsonapi.MarshalPayload(res, appointment)
	if err != nil {
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Destroy deletes a Appointment from the DB. This function is mapped
// to the path DELETE /appointments/{appointment_id}
// @Summary Delete an appointment
// @Description Delete an appointment
// @Tags Appointments
// @Accept  json
// @Produce  json
// @Param  id path int true "Appointment ID" Format(uuid)
// @Success 204 {object} models.Appointment
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /appointments/{id} [delete]
// @Security ApiKeyAuth
func (v AppointmentsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Allocate an empty Appointment
	appointment := &models.Appointment{}

	// To find the Appointment the parameter appointment_id is used.
	if err := tx.Find(appointment, c.Param("appointment_id")); err != nil {
		return apiError(c, "Cannot delete resource. Resource not found",
			"Not Found", http.StatusNotFound, err)
	}

	if err := tx.Destroy(appointment); err != nil {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, err)
	}

	// Redirect to the parents index page
	return c.Render(204, r.Func("application/json",
		customJSONRenderer("")))
}
