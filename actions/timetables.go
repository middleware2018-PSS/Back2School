package actions

import (
	"bytes"
	"net/http"

	"github.com/cippaciong/jsonapi"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/middleware2018-PSS/back2_school/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Timetable)
// DB Table: Plural (timetables)
// Resource: Plural (Timetables)
// Path: Plural (/timetables)
// View Template Folder: Plural (/templates/timetables/)

// TimetablesResource is the resource for the Timetable model
type TimetablesResource struct {
	buffalo.Resource
}

// List gets all Timetables. This function is mapped to the path
// GET /timetables
// @Summary List Timetables
// @Description Get the list of all timetables
// @Tags Timetables
// @Accept  json
// @Produce  json
// @Success 200 {array} models.Timetables
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /timetables [get]
// @Security ApiKeyAuth
func (v TimetablesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "No transaction found", "Internal Server Error",
			http.StatusInternalServerError, errors.New("No transaction found"))
	}

	timetables := &models.Timetables{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Timetables from the DB
	if err := q.All(timetables); err != nil {
		return apiError(c, "Internal Error", "Internal Server Error",
			http.StatusInternalServerError, err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	res := new(bytes.Buffer)
	err := jsonapi.MarshalPayload(res, *timetables)
	if err != nil {
		log.Debug("Problem marshalling timetables in actions.TimetablesResource.List")
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Show gets the data for one Timetable. This function is mapped to
// the path GET /timetables/{timetable_id}
func (v TimetablesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "No transaction found", "Internal Server Error",
			http.StatusInternalServerError, errors.New("No transaction found"))
	}

	// Allocate an empty Timetable
	timetable := &models.Timetable{}

	// To find the Timetable the parameter timetable_id is used.
	if err := tx.Eager().Find(timetable, c.Param("timetable_id")); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	res := new(bytes.Buffer)
	err := jsonapi.MarshalPayload(res, timetable)
	if err != nil {
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// New renders the form for creating a new Timetable.
// This function is mapped to the path GET /timetables/new
func (v TimetablesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Timetable{}))
}

// Create adds a Timetable to the DB. This function is mapped to the
// path POST /timetables
func (v TimetablesResource) Create(c buffalo.Context) error {
	// Allocate an empty Timetable
	timetable := &models.Timetable{}

	// Unmarshal timetable from the json payload
	if err := jsonapi.UnmarshalPayload(c.Request().Body, timetable); err != nil {
		return apiError(c, "Error processing the request payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Create and save the timetable
	verrs, err := tx.ValidateAndCreate(timetable)
	if err != nil {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, err)
	}

	// Check for validation errors
	if verrs.HasAny() {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, verrs)
	}

	// Log timetable creation
	log.Debug("Timetable created in actions.TimetablesResource.Create:\n%v\n", timetable)

	// Reload the timetable to rebuild relationships
	if err := tx.Eager().Find(timetable, timetable.ID); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	// If there are no errors return the Timetable resource
	res := new(bytes.Buffer)
	err = jsonapi.MarshalPayload(res, timetable)
	if err != nil {
		return apiError(c, "Error processing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}
	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Edit renders a edit form for a Timetable. This function is
// mapped to the path GET /timetables/{timetable_id}/edit
func (v TimetablesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Timetable
	timetable := &models.Timetable{}

	if err := tx.Find(timetable, c.Param("timetable_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, timetable))
}

// Update changes a Timetable in the DB. This function is mapped to
// the path PUT /timetables/{timetable_id}
func (v TimetablesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Allocate an empty Timetable
	timetable := &models.Timetable{}

	if err := tx.Find(timetable, c.Param("timetable_id")); err != nil {
		return apiError(c, "Cannot update the resource. Resource not found",
			"Not Found", http.StatusNotFound, err)
	}

	// Unmarshall the JSON payload into a Timetable struct
	if err := jsonapi.UnmarshalPayload(c.Request().Body, timetable); err != nil {
		return apiError(c, "Error processing the request payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Update the timetable in the DB
	verrs, err := tx.ValidateAndUpdate(timetable)
	if err != nil {
		return apiError(c, "Internal error",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Check for validation errors
	if verrs.HasAny() {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, verrs)
	}

	// Reload the timetable to rebuild relationships
	if err := tx.Eager().Find(timetable, timetable.ID); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	// Marshal the resource and send it back
	res := new(bytes.Buffer)
	err = jsonapi.MarshalPayload(res, timetable)
	if err != nil {
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Destroy deletes a Timetable from the DB. This function is mapped
// to the path DELETE /timetables/{timetable_id}
func (v TimetablesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Allocate an empty Timetable
	timetable := &models.Timetable{}

	// To find the Timetable the parameter timetable_id is used.
	if err := tx.Find(timetable, c.Param("timetable_id")); err != nil {
		return apiError(c, "Cannot delete resource. Resource not found",
			"Not Found", http.StatusNotFound, err)
	}

	if err := tx.Destroy(timetable); err != nil {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, err)
	}

	// Redirect to the parents index page
	return c.Render(204, r.Func("application/json",
		customJSONRenderer("")))
}
