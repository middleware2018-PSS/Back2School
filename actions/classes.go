package actions

import (
	"bytes"
	"net/http"

	"github.com/cippaciong/jsonapi"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/middleware2018-PSS/back2_school/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Class)
// DB Table: Plural (classes)
// Resource: Plural (Classes)
// Path: Plural (/classes)
// View Template Folder: Plural (/templates/classes/)

// ClassesResource is the resource for the Class model
type ClassesResource struct {
	buffalo.Resource
}

// List gets all Classes. This function is mapped to the path
// GET /classes
// @Summary List classes
// @Description Get the list of all classes
// @Tags Classes
// @Accept  json
// @Produce  json
// @Success 200 {array} models.Class
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /classes [get]
// @Security ApiKeyAuth
func (v ClassesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "No transaction found", "Internal Server Error",
			http.StatusInternalServerError, errors.New("No transaction found"))
	}

	classes := &models.Classes{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Classes from the DB
	if err := q.All(classes); err != nil {
		return apiError(c, "Internal Error", "Internal Server Error",
			http.StatusInternalServerError, err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	res := new(bytes.Buffer)
	err := jsonapi.MarshalPayload(res, *classes)
	if err != nil {
		log.Debug("Problem marshalling classes in actions.ClassesResource.List")
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Show gets the data for one Class. This function is mapped to
// the path GET /classes/{class_id}
// @Summary Get a class
// @Description Get a single class and its relationships
// @Tags Classes
// @Accept  json
// @Produce  json
// @Success 200 {object} models.Class
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /classes/{id} [get]
// @Security ApiKeyAuth
func (v ClassesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "No transaction found", "Internal Server Error",
			http.StatusInternalServerError, errors.New("No transaction found"))
	}

	// Allocate an empty Class
	class := &models.Class{}

	// To find the Class the parameter class_id is used.
	if err := tx.Eager().Find(class, c.Param("class_id")); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	res := new(bytes.Buffer)
	err := jsonapi.MarshalPayload(res, class)
	if err != nil {
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// New renders the form for creating a new Class.
// This function is mapped to the path GET /classes/new
func (v ClassesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Class{}))
}

// Create adds a Class to the DB. This function is mapped to the
// path POST /classes
// @Summary Create a class
// @Description Create a class from the payload
// @Tags Classes
// @Accept  json
// @Produce  json
// @Param Class body models.Class true "Class payload"
// @Success 200 {object} models.Class
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 422 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /classes [post]
// @Security ApiKeyAuth
func (v ClassesResource) Create(c buffalo.Context) error {
	// Allocate an empty Class
	class := &models.Class{}

	// Unmarshal class from the json payload
	if err := jsonapi.UnmarshalPayload(c.Request().Body, class); err != nil {
		return apiError(c, "Error processing the request payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Create and save the class
	verrs, err := tx.ValidateAndCreate(class)
	if err != nil {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, err)
	}

	// Check for validation errors
	if verrs.HasAny() {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, verrs)
	}

	// Log class creation
	log.Debug("Class created in actions.ClasssesResource.Create:\n%v\n", class)

	// Reload the class to rebuild relationships
	if err := tx.Eager().Find(class, class.ID); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	// If there are no errors return the Appointment resource
	res := new(bytes.Buffer)
	err = jsonapi.MarshalPayload(res, class)
	if err != nil {
		return apiError(c, "Error processing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}
	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Edit renders a edit form for a Class. This function is
// mapped to the path GET /classes/{class_id}/edit
func (v ClassesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Class
	class := &models.Class{}

	if err := tx.Find(class, c.Param("class_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, class))
}

// Update changes a Class in the DB. This function is mapped to
// the path PUT /classes/{class_id}
// @Summary Update a class
// @Description Update a class from the payload
// @Tags Classes
// @Accept  json
// @Produce  json
// @Param Class body models.Class true "Class payload"
// @Success 200 {object} models.Class
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 422 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /classes [put]
// @Security ApiKeyAuth
func (v ClassesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Allocate an empty Class
	class := &models.Class{}

	if err := tx.Find(class, c.Param("class_id")); err != nil {
		return apiError(c, "Cannot update the resource. Resource not found",
			"Not Found", http.StatusNotFound, err)
	}

	// Unmarshall the JSON payload into a Class struct
	if err := jsonapi.UnmarshalPayload(c.Request().Body, class); err != nil {
		return apiError(c, "Error processing the request payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Update the class in the DB
	verrs, err := tx.ValidateAndUpdate(class)
	if err != nil {
		return apiError(c, "Internal error",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	// Check for validation errors
	if verrs.HasAny() {
		return apiError(c, "Validation Error", "Unprocessable Entity",
			http.StatusUnprocessableEntity, verrs)
	}

	// Reload the class to rebuild relationships
	if err := tx.Eager().Find(class, class.ID); err != nil {
		return apiError(c, "The requested resource cannot be found",
			"Not Found", http.StatusNotFound, err)
	}

	// Marshal the resource and send it back
	res := new(bytes.Buffer)
	err = jsonapi.MarshalPayload(res, class)
	if err != nil {
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Destroy deletes a Class from the DB. This function is mapped
// to the path DELETE /classes/{class_id}
// @Summary Delete a class
// @Description Delete a class
// @Tags Classes
// @Accept  json
// @Produce  json
// @Param  id path int true "Class ID" Format(uuid)
// @Success 204 {object} models.Class
// @Failure 404 {object} jsonapi.ErrorObject
// @Failure 500 {object} jsonapi.ErrorObject
// @Router /classes/{id} [delete]
// @Security ApiKeyAuth
func (v ClassesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, errors.New("no transaction found"))
	}

	// Allocate an empty Class
	class := &models.Class{}

	// To find the Class the parameter class_id is used.
	if err := tx.Find(class, c.Param("class_id")); err != nil {
		return apiError(c, "Cannot delete resource. Resource not found",
			"Not Found", http.StatusNotFound, err)
	}

	if err := tx.Destroy(class); err != nil {
		return apiError(c, "Internal error", "Internal Server Error",
			http.StatusInternalServerError, err)
	}

	// Redirect to the classes index page
	return c.Render(204, r.Func("application/json",
		customJSONRenderer("")))
}
