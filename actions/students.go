package actions

import (
	"bytes"
	"net/http"

	"github.com/cippaciong/jsonapi"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/uuid"
	"github.com/middleware2018-PSS/back2_school/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Student)
// DB Table: Plural (students)
// Resource: Plural (Students)
// Path: Plural (/students)
// View Template Folder: Plural (/templates/students/)

// StudentsResource is the resource for the Student model
type StudentsResource struct {
	buffalo.Resource
}

// List gets all Students. This function is mapped to the path
// GET /students
func (v StudentsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return apiError(c, "No transaction found", "Internal Server Error",
			http.StatusInternalServerError, errors.New("No transaction found"))
	}

	students := &models.Students{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	if c.Param("parent_id") != "" {
		parent := &models.Parent{}
		// Load the parent and all the students
		if err := tx.Eager("Students").Find(parent, c.Param("parent_id")); err != nil {
			//if err := tx.Eager("Students").Where("id = ?", c.Param("parent_id")).First(parent); err != nil {
			//if err := tx.Find(parent, c.Param("parent_id")); err != nil {
			log.Println("HERE")
			return apiError(c, "The requested resource cannot be found",
				"Not Found", http.StatusNotFound, err)
		}
		*students = parent.Students

		log.Println(parent)

	} else if c.Param("teacher_id") != "" {
		log.Println("GOT A TEACHER")
	}

	//// Retrieve all Students from the DB
	//if err := q.All(students); err != nil {
	//return errors.WithStack(err)
	//}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	// Convert the slice of students to a slice of pointers to students
	// because Pop wants the former, jsonapi, the latter
	studentsp := []*models.Student{}
	for i := 0; i < len(*students); i++ {
		studentsp = append(studentsp, &((*students)[i]))
	}

	res := new(bytes.Buffer)
	err := jsonapi.MarshalPayload(res, studentsp)
	if err != nil {
		log.Debug("Problem marshalling students in actions.StudentsResource.List")
		return apiError(c, "Internal Error preparing the response payload",
			"Internal Server Error", http.StatusInternalServerError, err)
	}

	return c.Render(200, r.Func("application/json",
		customJSONRenderer(res.String())))
}

// Show gets the data for one Student. This function is mapped to
// the path GET /students/{student_id}
func (v StudentsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Student
	student := &models.Student{}

	// To find the Student the parameter student_id is used.
	if err := tx.Find(student, c.Param("student_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, student))
}

// New renders the form for creating a new Student.
// This function is mapped to the path GET /students/new
func (v StudentsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Student{}))
}

// Create adds a Student to the DB. This function is mapped to the
// path POST /students
func (v StudentsResource) Create(c buffalo.Context) error {
	// Allocate an empty Student
	student := &models.Student{}

	// To create a student you must use the Parent route because
	// they have to be related
	if c.Param("parent_id") == "" {
		return apiError(c, "The student resource cannot be created without a parent associated",
			"Unprocessable Entity", http.StatusUnprocessableEntity,
			errors.New("The resource cannot be created"))
	} else {
		// Unmarshall the JSON payload into a Student struct
		if err := jsonapi.UnmarshalPayload(c.Request().Body, student); err != nil {
			return apiError(c, "Error processing the request payload",
				"Internal Server Error", http.StatusInternalServerError, err)
		}

		// Get the DB connection from the context
		tx, ok := c.Value("tx").(*pop.Connection)
		if !ok {
			return apiError(c, "Internal error", "Internal Server Error",
				http.StatusInternalServerError, errors.New("no transaction found"))
		}

		// Check if the parent exist
		parent := &models.Parent{}
		if err := tx.Find(parent, c.Param("parent_id")); err != nil {
			return apiError(c, "Cannot find the parent associated to the request",
				"Unprocessable Entity", http.StatusUnprocessableEntity, err)
		}

		// Create and save the user
		verrs, err := tx.ValidateAndCreate(student)
		if err != nil {
			return apiError(c, "Validation Error", "Unprocessable Entity",
				http.StatusUnprocessableEntity, err)
		}

		// Check for validation errors
		if verrs.HasAny() {
			return apiError(c, "Validation Error", "Unprocessable Entity",
				http.StatusUnprocessableEntity, err)
		}

		// Create record in parents_users table
		id, _ := uuid.NewV4()
		if err := tx.RawQuery("INSERT INTO parents_students (id, parent_id, student_id) VALUES (?, ?, ?)",
			id, parent.ID, student.ID).Exec(); err != nil {
			// If you can't create the association, remove also
			// the student from the database
			if err := tx.Destroy(student); err != nil {
				return apiError(c, "Internal error", "Internal Server Error",
					http.StatusInternalServerError, err)
			}
			return apiError(c, "Unable to create the association", "Unprocessable Entity",
				http.StatusUnprocessableEntity, err)
		}

		// Return the user
		log.Debug("Student created in actions.StudentsResource.Create:\n%v\n", student)

		// If there are no errors return the Student resource
		res := new(bytes.Buffer)
		err = jsonapi.MarshalPayload(res, student)
		if err != nil {
			return apiError(c, "Error processing the response payload",
				"Internal Server Error", http.StatusInternalServerError, err)
		}
		return c.Render(200, r.Func("application/json",
			customJSONRenderer(res.String())))
	}
}

// Edit renders a edit form for a Student. This function is
// mapped to the path GET /students/{student_id}/edit
func (v StudentsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Student
	student := &models.Student{}

	if err := tx.Find(student, c.Param("student_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, student))
}

// Update changes a Student in the DB. This function is mapped to
// the path PUT /students/{student_id}
func (v StudentsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Student
	student := &models.Student{}

	if err := tx.Find(student, c.Param("student_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Student to the html form elements
	if err := c.Bind(student); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(student)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, student))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Student was updated successfully")

	// and redirect to the students index page
	return c.Render(200, r.Auto(c, student))
}

// Destroy deletes a Student from the DB. This function is mapped
// to the path DELETE /students/{student_id}
func (v StudentsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Student
	student := &models.Student{}

	// To find the Student the parameter student_id is used.
	if err := tx.Find(student, c.Param("student_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(student); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Student was destroyed successfully")

	// Redirect to the students index page
	return c.Render(200, r.Auto(c, student))
}
